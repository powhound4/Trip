package edu.csu2017fa314.T04.Server;

import com.google.gson.Gson;

import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import edu.csu2017fa314.T04.Database.QueryBuilder;
import spark.Request;
import spark.Response;
import java.util.Arrays;
import java.util.ArrayList;
import edu.csu2017fa314.T04.View.distanceObject;
import java.lang.reflect.Type;
import com.google.gson.reflect.TypeToken;

import static spark.Spark.post;

public class Server {
    
    public static String [] distUnits;

    public static void main(String[] args) {
        Server start = new Server();
        start.serve();
    }

    public void serve() {
        Gson newG = new Gson();
        post("/testing", this::testing, newG::toJson); //Create new listener
    }

    private Object testing(Request rec, Response res) {
        //Set the return headers
        setHeaders(res);

        //Init json parser
        JsonParser parser = new JsonParser();

        //Grab the json body from POST
        JsonElement elm = parser.parse(rec.body());

        //Create new Gson (a Google library for creating a JSON representation of a java class)
        Gson gson = new Gson();

        //Create new Object from received JsonElement elm
        ServerRequest serverRec = gson.fromJson(elm, ServerRequest.class);

        //The object generated by the frontend should match whatever class you are reading into.
        //Notice how DataClass has name and ID and how the frontend is generating an object with name and ID.
        System.out.println("Got \"" + serverRec.toString() + "\" from server.");
        
        
        String queryID = serverRec.getId();
        distUnits = serverRec.getDistUnits();

        //Create object with svg file path and list to return to server
        //ServerResponse sRes = new ServerResponse("../ColoradoSVGEdited.svg");
        
        // Create new QueryBuilder instance and pass in credentials
        QueryBuilder queryBuild = new QueryBuilder("powhound", "828940106"); 
        // if id == 0: if the user has qued the server to return names related search term
        ServerResponse serverRes = new ServerResponse();
        
        if(queryID.equals("0")){
            String searched = "%" + serverRec.getName() + "%";
            String queryString = String.format("SELECT airports.name, airports.code, airports.id, "
                   + "airports.municipality, regions.name, countries.name, continents.name "
                   + " FROM continents INNER JOIN countries "
                   + " ON continents.code = countries.continent INNER JOIN regions "
                   + " ON countries.code = regions.iso_country INNER JOIN airports "
                   + " ON regions.code = airports.iso_region WHERE countries.name LIKE '%s' "
                   + " OR regions.name LIKE '%s' OR airports.name LIKE '%s' "
                   + " OR airports.municipality LIKE '%s' "
                   + " ORDER BY continents.name, countries.name, regions.name, "
                   + " airports.municipality, "
                   + " airports.name ASC", searched, searched, searched, searched);            
            ArrayList<String> queryDests = queryBuild.queryTerm(queryString);
            
             serverRes = new ServerResponse(queryDests, queryID);
             System.out.println("Sending \"" + serverRes.toString() + "\" to server.");
              //ret = gson.toJson(sRes, ServerResponse.class);  
        }
        // if id ==1: if user has selcted the dests they want displayed in itinerary
        if(queryID.equals("1")){
        String name = "%" + serverRec.getName() + "%";
        String searched = serverRec.getDests();
        System.out.println("Searched = " + searched);
        String queryString = String.format("SELECT airports.id, airports.name, airports.code,"
            + " airports.municipality, regions.name as region, countries.name as country,"
            + " continents.name as continent, airports.latitude, airports.longitude,"
            + " airports.elevation FROM continents INNER JOIN countries "
            + " ON continents.code = countries.continent INNER JOIN regions "
            + " ON countries.code = regions.iso_country INNER JOIN airports "
            + " ON regions.code = airports.iso_region WHERE airports.code IN ('%s') "
            + " ORDER BY continents.name, countries.name, regions.name, "
            + " airports.municipality, airports.name ASC", searched);
            ArrayList<distanceObject> queryResults = queryBuild.query(queryString, serverRec.getOptimization());
        
        /*Gson gsonNew = new Gson();
        Type resType = new TypeToken<Destination>() {}.getType();
        String result = gsonNew.toJson(queryResults, resType);
        System.out.println(result);*/
         // Create object with svg file path and list to return to server
        serverRes = new ServerResponse("World.svg", queryResults, queryID);
        System.out.println("!!!!Optimization = " + serverRec.getOptimization());

        //System.out.println("Sending \"" + sRes.toString() + "\" to server.");

        //Convert response to json
        //ret = gson.toJson(sRes, ServerResponse.class);

        /* What to return to the server.
         * In this example, the "ServerResponse" object sRes 
         * is converted into a JSON representation using GSON library.
         * If you'd like to see what this JSON looks like, 
         * it is logged to the console in the web client.
         */
        
        }
        //if it's a file upload
        if(queryID.equals("2")){
             String searched = serverRec.getDests();
             String queryString = String.format("SELECT airports.id, airports.name, airports.code,"
                   + " airports.municipality, regions.name as region, countries.name as country,"
                   + " continents.name as continent, airports.latitude, airports.longitude,"
                   + " airports.elevation FROM continents INNER JOIN countries"
                   + " ON continents.code = countries.continent INNER JOIN regions"
                   + " ON countries.code = regions.iso_country INNER JOIN airports"
                   + " ON regions.code = airports.iso_region WHERE airports.code IN ('%s')"
                   + " ORDER BY continents.name, countries.name, regions.name,"
                   + " airports.municipality, airports.name ASC", searched);
             ArrayList<distanceObject> queryResults = queryBuild.query(queryString, serverRec.getOptimization());
             serverRes = new ServerResponse("World.svg", queryResults, queryID);
             System.out.println("Sending \"" + serverRes.toString() + "\" to server.");               
         }
        
        // ServerResponse.class returns all the private variables within that class as a json object
        Object ret = gson.toJson(serverRes,ServerResponse.class);
        return ret;
    }
    
    public static String [] getDistUnits(){
        return distUnits;
    }
    
    private void setHeaders(Response res) {
        // Declares returning type json
        res.header("Content-Type", "application/json");

        // Ok for browser to call even if different host host
        res.header("Access-Control-Allow-Origin", "*");
        res.header("Access-Control-Allow-Headers", "*");
    }
}

